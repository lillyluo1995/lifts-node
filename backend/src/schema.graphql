scalar Date

enum TargetType {
    PUSH
    PULL
    LEGS
}

type MoveMetadata {
    id: ID!
    name: String!
    target_muscle: String!
}

type Lift {
    id: ID!
    date: Date!
    target_type: TargetType!
    moves: [LiftMove!]!
}

type LiftMove {
    lift_id: ID!
    move_metadata_id: ID!
    move_metadata: MoveMetadata # make optional to only fetch as needed
    sets: [LiftSet!] # make optional to only fetch as needed
}

type LiftSet {
    id: ID!
    move_metadata_id: ID!
    lift_id: ID!
    set_count: Int!
    num_reps: Int!
    weight_lbs: Int!
    unilateral: Boolean!
    move_metadata: MoveMetadata!
}

type Rep {
    id: ID!
    set_id: ID!
    num_reps: Int! 
    weight: Int!
    Unilateral: Boolean!
}

type Query {
    getMoveMetadata: [MoveMetadata!]! 
    getMoveMetadataUsingId(id: String!): MoveMetadata
    getLifts: [Lift!]!
    getLiftUsingId(id: Int!): Lift
    getSetsForLiftAndMove(liftId: String!, moveMetadataId: String!): [LiftSet!]!
}

interface BaseResponse {
    code: Int!
    success: Boolean!
    message: String!
}

type CreateMoveMetadataResponse implements BaseResponse{
    code: Int!
    success: Boolean!
    message: String!
    moveMetadata: MoveMetadata
}

input CreateMoveMetadataInput {
    name: String!
    target_muscle: String!
}

type CreateLiftResponse implements BaseResponse {
    code: Int!
    success: Boolean!
    message: String!
    lift: Lift
}

input CreateLiftInput {
    date: Date
    target_type: TargetType!
}

input AddMoveToLiftInput {
    lift_id: ID! 
    move_metadata_id: ID!
}

type AddMoveToLiftResponse implements BaseResponse {
    code: Int!
    success: Boolean!
    message: String!
}

input AddSetForMoveInput {
    lift_id: ID!
    move_metadata_id: ID!
    num_reps: Int!
    weight_lbs: Int!
    unilateral: Boolean!
}

type AddSetForMoveResponse implements BaseResponse {
    code: Int!
    success: Boolean!
    message: String!
    set: LiftSet 
}

type Mutation {
    "Create a new move"
    createMoveMetadata(input: CreateMoveMetadataInput!): CreateMoveMetadataResponse!
    createLift(input: CreateLiftInput!): CreateLiftResponse!
    addMoveToLift(input: AddMoveToLiftInput!): AddMoveToLiftResponse!
    addSetForMove(input: AddSetForMoveInput!): AddSetForMoveResponse
}